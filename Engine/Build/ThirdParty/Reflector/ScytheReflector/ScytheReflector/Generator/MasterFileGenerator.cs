using System.Text;
using ScytheReflector.Models;

namespace ScytheReflector.Generator;

public class MasterFileGenerator
{
    public static class Template
    {
        public static class InterfaceUnit
        {
            public static string Content = @"export module [ProjectName]Generated;

export import Reflection;

[ModuleExports]

export namespace Reflection {
    // Initialization function exposed to allow registering classes.
    // Necessary to call if reflection is generated in a lib/dll
    inline void InitRefletion()
    {
[RegisterClasses]
    };
}
";
        }
        
        public static string EditorOnlyBegin = "#ifdef EDITOR";
        public static string EditorOnlyEnd = "#endif // EDITOR";
    }

    public MasterFileGenerator(string[] moduleExports, Class[] classes, string projectName = "", string outputFolder = "")
    {
        ProjectName = projectName;
        ModuleExports = moduleExports;
        OutputFolder = outputFolder;
        Classes = classes;
    }

    public string[] ModuleExports { get; set; }
    public string ProjectName { get; set; }
    public string OutputFolder { get; set; }
    public Class[] Classes { get; set; }

    public string CreateHeaderMessage()
    {
        StringBuilder headerMessage = new();
        headerMessage.AppendLine("/*");
        headerMessage.AppendLine(" * This file was generated by ScytheReflector.");
        headerMessage.AppendLine(" * Do not modify this file, as it will be overwritten.");
        headerMessage.AppendLine(" */");
        return headerMessage.ToString();
    }
    
    public void Generate()
    {
        StringBuilder builder = new();
        builder.AppendLine(CreateHeaderMessage());
        var content = Template.InterfaceUnit.Content;
        content = content.Replace("[ProjectName]", ProjectName);

        StringBuilder moduleExports = new();
        foreach (var moduleExport in ModuleExports.Select(x => Path.GetFileNameWithoutExtension(x)))
        {
            moduleExports.AppendLine($"export import :{moduleExport};");
        }

        StringBuilder classRegister = new();
        foreach (var @class in Classes)
        {
            if (@class.EditorOnly)
            {
                classRegister.AppendLine(Template.EditorOnlyBegin);
            }
            classRegister.AppendLine($"\t\tInternal::Register<{@class.Name}>(Class<{@class.Name}>::GetName());");
            if (@class.EditorOnly)
            {
                classRegister.AppendLine(Template.EditorOnlyEnd);
            }
        }
        
        content = content.Replace("[ModuleExports]", moduleExports.ToString());
        content = content.Replace("[RegisterClasses]", classRegister.ToString());
        
        builder.AppendLine(content);
        
        File.WriteAllText(Path.Combine(OutputFolder, $"Generated.ixx"), builder.ToString());
    }
    
    public static void Generate(string[] moduleExports, Class[] classes, string projectName = "", string outputFolder = "")
    {
        MasterFileGenerator generator = new(moduleExports, classes, projectName, outputFolder);
        generator.Generate();
    }
}